## Name of the workflow
name: Hprofile Actions
## How this workflow will trigger 
## workflow_distpatch --> means on saying RUN
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: actapp ## repo-name
  ECS_SERVICE: vproapp-act-svc ## service-name
  ECS_CLUSTER: vproapp-act ## cluster-name
  ECS_TASK_DEFINITION: aws-files/taskdeffile.json ## task-definition path
  CONTAINER_NAME: vproapp-act-tdef ## container-name

jobs:
  ## Creating a job with name: Testing
  Testing:
    ## Specifying runner 
    ## It is going to run a container with a Docker image of ubuntu
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      # run: echo "workflow works !" --> run action is only to run a command, 
      # which we are not going to use in this place

      # we have tools from github market place
      # we are using checkout from actions sections, which is going to pull 
      # source code from your central repository
      uses: actions/checkout@v4

    # maven is pre-build in ubuntu-latest runner
    - name: Maven test
      run: mvn test

    - name: Checkstyle
      run: mvn checkstyle:checkstyle

    - name: Set Java11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '11'

    # Setup sonar-scanner
    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v7

    # Run sonar-scanner
    - name: SonarQube Scan
      run: sonar-scanner -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.sources=src/ -Dsonar.junit.reportsPath=target/surefire-reports/ -Dsonar.jacoco.reportsPath=target/jacoco.exec -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL   

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Update application.properties file
      run: |
        sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
        sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
        sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

    - name: Build & Upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTRY }}
        repo: actapp
        region: ${{ env.AWS_REGION }}
        tags: latest,${{ github.run_number }}
        daemon_off: false
        dockerfile: ./Dockerfile
        context: ./

  DEPLOY:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
